# main.py
import os
import json
import csv
from datetime import datetime
from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.scrollview import ScrollView
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.uix.popup import Popup
from kivy.uix.slider import Slider
from kivy.uix.checkbox import CheckBox
from kivy.metrics import dp, sp
from kivy.core.window import Window
from kivy.properties import NumericProperty, ListProperty, StringProperty, BooleanProperty, ObjectProperty
from kivy.graphics import Color, Rectangle
from kivy.utils import get_color_from_hex

# === –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ===
DATA_DIR = "groups"
os.makedirs(DATA_DIR, exist_ok=True)

# === –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è Kivy RGBA –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ Tkinter) ===
COLOR_PRIMARY = get_color_from_hex("#2c3e50")      # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π #2c3e50
COLOR_SECONDARY = get_color_from_hex("#3498db")    # –ì–æ–ª—É–±–æ–π #3498db
COLOR_ACCENT = get_color_from_hex("#e74c3c")       # –ö—Ä–∞—Å–Ω—ã–π #e74c3c
COLOR_SUCCESS = get_color_from_hex("#27ae60")      # –ó–µ–ª–µ–Ω—ã–π #27ae60
COLOR_WARNING = get_color_from_hex("#f39c12")      # –û—Ä–∞–Ω–∂–µ–≤—ã–π #f39c12
COLOR_DANGER = get_color_from_hex("#c0392b")       # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π #c0392b
COLOR_LIGHT = get_color_from_hex("#ecf0f1")        # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π #ecf0f1
COLOR_DARK = get_color_from_hex("#34495e")         # –°–µ—Ä–æ-—Å–∏–Ω–∏–π #34495e
COLOR_WHITE = get_color_from_hex("#ffffff")        # –ë–µ–ª—ã–π #ffffff
COLOR_GRAY = get_color_from_hex("#bdc3c7")         # –°–µ—Ä—ã–π #bdc3c7
COLOR_CHECKED = get_color_from_hex("#aed6f1")      # –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π #aed6f1
COLOR_CHECKED_ACTIVE = COLOR_SUCCESS                # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö
COLOR_BUTTON_DANGER = COLOR_ACCENT                 # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –¢.–ë.
COLOR_BUTTON_SUCCESS = COLOR_SUCCESS               # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
COLOR_BUTTON_PRIMARY = COLOR_SECONDARY            # –ì–æ–ª—É–±–æ–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
COLOR_BUTTON_GRAY = COLOR_GRAY                     # –°–µ—Ä—ã–π –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
COLOR_BG_LIGHT = COLOR_LIGHT                       # –§–æ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COLOR_HEADER_BG = COLOR_PRIMARY                    # –§–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞
COLOR_TEXT_DARK = COLOR_DARK                       # –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç
COLOR_TEXT_LIGHT = COLOR_WHITE                     # –°–≤–µ—Ç–ª—ã–π —Ç–µ–∫—Å—Ç

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª–æ–≥–∏–∫–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª–∞) ===
students = []
group_name = "–ì—Ä—É–ø–ø–∞"
num_shifts = 4

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞) ===
def init_students():
    global students
    students.clear()
    for i in range(30):
        s = {
            "name": f"–°—Ç—É–¥–µ–Ω—Ç {i+1}",
            "total_score": 0,
            "tb_pressed": False,
            "work_pressed": False,
            "history": []
        }
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–º–µ–Ω—ã
        for j in range(1, num_shifts + 1):
            s[f"s{j}"] = 0
        students.append(s)

# === –í–∏–¥–∂–µ—Ç –¥–ª—è —è—á–µ–π–∫–∏ –æ—Ü–µ–Ω–∫–∏ (—Å–ª–∞–π–¥–µ—Ä + –∑–Ω–∞—á–µ–Ω–∏–µ + —á–µ–∫–±–æ–∫—Å) ===
class ScoreSliderWidget(BoxLayout):
    score_value = NumericProperty(0)
    student_index = NumericProperty(0)
    shift_index = NumericProperty(0)
    owner = ObjectProperty(None)

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.orientation = 'vertical'
        self.size_hint_x = None
        self.width = dp(120)
        self.spacing = dp(1)
        
        # –§–æ–Ω –¥–ª—è —è—á–µ–π–∫–∏
        with self.canvas.before:
            Color(*COLOR_GRAY)
            self.rect = Rectangle(pos=self.pos, size=self.size)
        self.bind(pos=self._update_rect, size=self._update_rect)

        # –°–ª–∞–π–¥–µ—Ä
        self.slider = Slider(min=0, max=100, value=int(self.score_value), step=1)
        self.slider.student_index = self.student_index
        self.slider.shift_index = self.shift_index
        self.slider.bind(value=self.on_slider_change)
        self.add_widget(self.slider)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.info_layout = BoxLayout(size_hint_y=None, height=dp(20), spacing=dp(2))
        
        # –ú–µ—Ç–∫–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º
        self.label = Label(text=str(int(self.score_value)), font_size=sp(8), size_hint_x=None, width=dp(30), color=COLOR_TEXT_DARK)
        self.info_layout.add_widget(self.label)
        
        # –ß–µ–∫–±–æ–∫—Å
        self.checkbox = CheckBox(active=True) # –£–ø—Ä–æ—â–µ–Ω–æ, –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –≤ —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        self.checkbox.student_index = self.student_index
        self.checkbox.shift_index = self.shift_index
        self.checkbox.bind(active=self.on_checkbox_active)
        self.info_layout.add_widget(self.checkbox)
        
        self.add_widget(self.info_layout)

    def _update_rect(self, instance, value):
        self.rect.pos = instance.pos
        self.rect.size = instance.size

    def on_slider_change(self, instance, value):
        i = self.student_index
        j = self.shift_index
        key = f"s{j+1}"
        students[i][key] = int(value)
        self.label.text = str(int(value))
        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–∞ –≤ —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        # –í –æ—Ä–∏–≥–∏–Ω–∞–ª–µ –æ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–µ–∫–±–æ–∫—Å–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è
        # –ó–¥–µ—Å—å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ update_status
        self.owner.update_status()

    def on_checkbox_active(self, instance, value):
        # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–∞
        # –í –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —ç—Ç–æ –≤–ª–∏—è–ª–æ –Ω–∞ —Ä–∞—Å—á–µ—Ç, –Ω–æ –≤ Kivy-–≤–µ—Ä—Å–∏–∏
        # –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å, –≥–¥–µ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
        pass

# === –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω ===
class MainScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.build_ui()

    def build_ui(self):
        main_layout = BoxLayout(orientation='vertical', padding=dp(10), spacing=dp(10))

        # === –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (Header) ===
        self.create_header(main_layout)

        # === –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (Control Panel) ===
        self.create_control_panel(main_layout)

        # === –¢–∞–±–ª–∏—Ü–∞ (–ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è) ===
        self.create_table(main_layout)

        # === –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã ===
        self.create_statistics(main_layout)

        self.add_widget(main_layout)
        self.create_table_ui()
        self.update_status()

    def create_header(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        header_frame = BoxLayout(orientation='vertical', size_hint_y=None, height=dp(60), padding=dp(5))
        with header_frame.canvas.before:
            Color(*COLOR_HEADER_BG)
            self.header_rect = Rectangle(pos=header_frame.pos, size=header_frame.size)
        header_frame.bind(pos=self._update_header_rect, size=self._update_header_rect)

        header_frame.add_widget(Label(text="üéì –§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ¬´–†—É–¥–Ω–µ–≤–æ¬ª", font_size=sp(16), bold=True, color=COLOR_WHITE))
        header_frame.add_widget(Label(text="üìä –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", font_size=sp(11), color=(0.7, 0.7, 0.7, 1)))
        parent_layout.add_widget(header_frame)

    def _update_header_rect(self, instance, value):
        self.header_rect.pos = instance.pos
        self.header_rect.size = instance.size

    def create_control_panel(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        ctrl_scroll = ScrollView(size_hint_y=None, height=dp(120))
        ctrl_frame = BoxLayout(orientation='horizontal', spacing=dp(10), size_hint_x=None)
        ctrl_frame.bind(minimum_width=ctrl_frame.setter('width'))

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        group_frame = BoxLayout(orientation='vertical', size_hint_x=None, width=dp(250), spacing=dp(5))
        group_frame.add_widget(Label(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã", font_size=sp(10), bold=True, size_hint_y=None, height=dp(20), color=COLOR_DARK, halign='left'))

        group_input_layout = BoxLayout(size_hint_y=None, height=dp(30), spacing=dp(5))
        group_input_layout.add_widget(Label(text="–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:", font_size=sp(9), size_hint_x=None, width=dp(100), color=COLOR_DARK, halign='left'))
        self.group_entry = TextInput(text=group_name, multiline=False, font_size=sp(9))
        group_input_layout.add_widget(self.group_entry)
        self.apply_btn = Button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", font_size=sp(9), size_hint_x=None, width=dp(80), background_color=COLOR_SUCCESS)
        self.apply_btn.bind(on_press=self.apply_group)
        group_input_layout.add_widget(self.apply_btn)
        group_frame.add_widget(group_input_layout)

        shifts_input_layout = BoxLayout(size_hint_y=None, height=dp(30), spacing=dp(5))
        shifts_input_layout.add_widget(Label(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω:", font_size=sp(9), size_hint_x=None, width=dp(120), color=COLOR_DARK, halign='left'))
        self.shifts_entry = TextInput(text=str(num_shifts), multiline=False, font_size=sp(9), size_hint_x=None, width=dp(40))
        shifts_input_layout.add_widget(self.shifts_entry)
        self.update_btn = Button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", font_size=sp(9), size_hint_x=None, width=dp(80), background_color=COLOR_SECONDARY)
        self.update_btn.bind(on_press=self.update_shifts)
        shifts_input_layout.add_widget(self.update_btn)
        group_frame.add_widget(shifts_input_layout)
        ctrl_frame.add_widget(group_frame)

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = BoxLayout(orientation='vertical', size_hint_x=None, width=dp(800), spacing=dp(5))
        actions_frame.add_widget(Label(text="–î–µ–π—Å—Ç–≤–∏—è", font_size=sp(10), bold=True, size_hint_y=None, height=dp(20), color=COLOR_DARK, halign='left'))
        actions_btn_layout = BoxLayout(orientation='horizontal', size_hint_y=None, height=dp(30), spacing=dp(3))
        self.enter_names_btn = Button(text="üìù –í–≤–µ—Å—Ç–∏ –§–ò–û", font_size=sp(8), background_color=COLOR_BUTTON_PRIMARY)
        self.enter_names_btn.bind(on_press=self.enter_names)
        actions_btn_layout.add_widget(self.enter_names_btn)

        self.student_chart_btn = Button(text="üìä –ì—Ä–∞—Ñ–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", font_size=sp(8), background_color=COLOR_DARK)
        self.student_chart_btn.bind(on_press=self.show_student_chart)
        actions_btn_layout.add_widget(self.student_chart_btn)

        self.shift_chart_btn = Button(text="üìà –ì—Ä–∞—Ñ–∏–∫ —Å–º–µ–Ω", font_size=sp(8), background_color=COLOR_DARK)
        self.shift_chart_btn.bind(on_press=self.show_shift_avg_chart)
        actions_btn_layout.add_widget(self.shift_chart_btn)

        self.save_btn = Button(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", font_size=sp(8), background_color=COLOR_SUCCESS)
        self.save_btn.bind(on_press=self.save_current)
        actions_btn_layout.add_widget(self.save_btn)

        self.load_btn = Button(text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å", font_size=sp(8), background_color=get_color_from_hex("#17a2b8"))
        self.load_btn.bind(on_press=self.load_group)
        actions_btn_layout.add_widget(self.load_btn)

        self.delete_btn = Button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", font_size=sp(8), background_color=COLOR_ACCENT)
        self.delete_btn.bind(on_press=self.delete_group)
        actions_btn_layout.add_widget(self.delete_btn)

        self.export_btn = Button(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV", font_size=sp(8), background_color=get_color_from_hex("#ffc107"), color=get_color_from_hex("#000000"))
        self.export_btn.bind(on_press=self.export_to_csv)
        actions_btn_layout.add_widget(self.export_btn)

        self.print_btn = Button(text="üñ®Ô∏è –ü–µ—á–∞—Ç—å", font_size=sp(8), background_color=get_color_from_hex("#6c757d"), color=COLOR_WHITE)
        self.print_btn.bind(on_press=self.print_table)
        actions_btn_layout.add_widget(self.print_btn)
        
        actions_frame.add_widget(actions_btn_layout)
        ctrl_frame.add_widget(actions_frame)

        ctrl_scroll.add_widget(ctrl_frame)
        parent_layout.add_widget(ctrl_scroll)

    def create_table(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã."""
        table_container = BoxLayout(orientation='vertical', size_hint_y=0.7)
        table_container.add_widget(Label(text="üìã –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", font_size=sp(12), bold=True, size_hint_y=None, height=dp(30), halign='left', color=COLOR_DARK))

        self.table_scroll = ScrollView()
        self.main_table = GridLayout(cols=1, spacing=dp(1), size_hint_y=None)
        self.main_table.bind(minimum_height=self.main_table.setter('height'))
        self.table_scroll.add_widget(self.main_table)
        table_container.add_widget(self.table_scroll)
        parent_layout.add_widget(table_container)

    def create_statistics(self, parent_layout):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        stats_frame = BoxLayout(size_hint_y=None, height=dp(50), padding=dp(5))
        with stats_frame.canvas.before:
            Color(*COLOR_DARK)
            self.stats_rect = Rectangle(pos=stats_frame.pos, size=stats_frame.size)
        stats_frame.bind(pos=self._update_stats_rect, size=self._update_stats_rect)

        stats_frame.add_widget(Label(text="üìà –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≥—Ä—É–ø–ø–µ:", font_size=sp(11), bold=True, color=COLOR_WHITE))
        self.avg_label_global = Label(text="‚Äì", font_size=sp(14), bold=True, color=COLOR_SECONDARY)
        stats_frame.add_widget(self.avg_label_global)
        stats_frame.add_widget(Label(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: (–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–∞)", font_size=sp(9), color=(0.7, 0.7, 0.7, 1)))
        parent_layout.add_widget(stats_frame)

    def _update_stats_rect(self, instance, value):
        self.stats_rect.pos = instance.pos
        self.stats_rect.size = instance.size

    # === –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ===
    def create_table_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã."""
        self.main_table.clear_widgets()
        self.name_labels = []
        self.sliders = [[] for _ in range(30)]
        self.labels = [[] for _ in range(30)]
        self.checkboxes = [[] for _ in range(30)]
        self.grade_labels = [None] * 30
        self.tb_buttons = [None] * 30
        self.work_buttons = [None] * 30

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        header_frame = BoxLayout(size_hint_y=None, height=dp(30), spacing=dp(2))
        with header_frame.canvas.before:
            Color(*COLOR_DARK)
            Rectangle(pos=header_frame.pos, size=header_frame.size)
        header_frame.bind(pos=lambda instance, value: setattr(instance.canvas.before.children[-1], 'pos', value),
                        size=lambda instance, value: setattr(instance.canvas.before.children[-1], 'size', value))

        header_frame.add_widget(Label(text="üë§ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞", font_size=sp(9), bold=True, size_hint_x=None, width=dp(150), color=COLOR_WHITE))
        for j in range(num_shifts):
            header_frame.add_widget(Label(text=f"–°–º–µ–Ω–∞ {j+1}", font_size=sp(9), bold=True, size_hint_x=None, width=dp(120), color=COLOR_WHITE))
        header_frame.add_widget(Label(text="–¢.–ë.", font_size=sp(9), bold=True, size_hint_x=None, width=dp(60), color=COLOR_WHITE))
        header_frame.add_widget(Label(text="–†–∞–±–æ—Ç–∞", font_size=sp(9), bold=True, size_hint_x=None, width=dp(80), color=COLOR_WHITE))
        header_frame.add_widget(Label(text="üìä –ò—Ç–æ–≥", font_size=sp(9), bold=True, size_hint_x=None, width=dp(80), color=COLOR_WHITE))
        self.main_table.add_widget(header_frame)

        # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        for i in range(30):
            row_color = (0.9, 0.9, 0.9, 1) if i % 2 == 0 else COLOR_WHITE
            row_layout = BoxLayout(size_hint_y=None, height=dp(60), spacing=dp(2))
            with row_layout.canvas.before:
                Color(*row_color)
                Rectangle(pos=row_layout.pos, size=row_layout.size)
            row_layout.bind(pos=lambda instance, value: setattr(instance.canvas.before.children[-1], 'pos', value),
                            size=lambda instance, value: setattr(instance.canvas.before.children[-1], 'size', value))

            # –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞
            def make_name_click_handler(index):
                def handler(instance):
                    self.change_single_name(index)
                return handler
            name_label = Button(
                text=students[i]["name"],
                font_size=sp(9),
                halign='left',
                valign='middle',
                background_normal='',
                background_color=row_color,
                color=COLOR_DARK,
                text_size=(dp(140), None)
            )
            name_label.bind(on_press=make_name_click_handler(i))
            name_label.size_hint_x = None
            name_label.width = dp(150)
            row_layout.add_widget(name_label)
            self.name_labels.append(name_label)

            # –°–º–µ–Ω—ã
            for j in range(num_shifts):
                cell_layout = BoxLayout(orientation='vertical', size_hint_x=None, width=dp(120), spacing=dp(1))
                with cell_layout.canvas.before:
                    Color(0.8, 0.8, 0.8, 1)
                    Rectangle(pos=cell_layout.pos, size=cell_layout.size)
                cell_layout.bind(pos=lambda instance, value: setattr(instance.canvas.before.children[-1], 'pos', value),
                                size=lambda instance, value: setattr(instance.canvas.before.children[-1], 'size', value))

                slider = Slider(min=0, max=100, value=students[i].get(f"s{j+1}", 0), step=1)
                slider.student_index = i
                slider.shift_index = j
                slider.bind(value=self.on_slider_change)
                cell_layout.add_widget(slider)
                self.sliders[i].append(slider)

                info_layout = BoxLayout(size_hint_y=None, height=dp(20), spacing=dp(2))
                initial_value = int(slider.value) if slider.value is not None else 0
                label = Label(text=str(initial_value), font_size=sp(8), size_hint_x=None, width=dp(30), color=COLOR_DARK)
                info_layout.add_widget(label)
                self.labels[i].append(label)

                checkbox = CheckBox(active=True)
                checkbox.student_index = i
                checkbox.shift_index = j
                checkbox.bind(active=self.on_checkbox_active)
                info_layout.add_widget(checkbox)
                self.checkboxes[i].append(checkbox)

                cell_layout.add_widget(info_layout)
                row_layout.add_widget(cell_layout)

            # –ö–Ω–æ–ø–∫–∏ –¢.–ë. –∏ –†–∞–±–æ—Ç–∞
            def make_tb_cmd(index):
                def cmd(instance):
                    students[index]["history"].append({
                        "action": "–¢.–ë.",
                        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "change": -20 if not students[index]["tb_pressed"] else 20
                    })
                    students[index]["tb_pressed"] = not students[index]["tb_pressed"]
                    instance.background_color = COLOR_BUTTON_DANGER if students[index]["tb_pressed"] else COLOR_GRAY
                    self.update_status()
                return cmd

            tb_btn = Button(text="–¢.–ë.", font_size=sp(8), size_hint_x=None, width=dp(60))
            tb_btn.background_color = COLOR_BUTTON_DANGER if students[i]["tb_pressed"] else COLOR_GRAY
            tb_btn.bind(on_press=make_tb_cmd(i))
            row_layout.add_widget(tb_btn)
            self.tb_buttons[i] = tb_btn

            def make_work_cmd(index):
                def cmd(instance):
                    students[index]["history"].append({
                        "action": "–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å",
                        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                        "change": 20 if not students[index]["work_pressed"] else -20
                    })
                    students[index]["work_pressed"] = not students[index]["work_pressed"]
                    instance.background_color = COLOR_BUTTON_SUCCESS if students[index]["work_pressed"] else COLOR_GRAY
                    self.update_status()
                return cmd

            work_btn = Button(text="–†–∞–±–æ—Ç–∞", font_size=sp(8), size_hint_x=None, width=dp(80))
            work_btn.background_color = COLOR_BUTTON_SUCCESS if students[i]["work_pressed"] else COLOR_GRAY
            work_btn.bind(on_press=make_work_cmd(i))
            row_layout.add_widget(work_btn)
            self.work_buttons[i] = work_btn

            # –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª
            grade_label = Label(text="0.0", font_size=sp(10), bold=True, size_hint_x=None, width=dp(80), color=COLOR_DARK)
            row_layout.add_widget(grade_label)
            self.grade_labels[i] = grade_label

            self.main_table.add_widget(row_layout)

    def on_slider_change(self, instance, value):
        i = instance.student_index
        j = instance.shift_index
        key = f"s{j+1}"
        students[i][key] = int(value)
        if i < len(self.labels) and j < len(self.labels[i]):
            self.labels[i][j].text = str(int(value))
        self.update_status()

    def on_checkbox_active(self, instance, value):
        # –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–∞
        pass

    # === –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã ===
    def apply_group(self, instance):
        global group_name
        new_name = self.group_entry.text.strip()
        if new_name:
            group_name = new_name
            # –í Kivy –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ ScreenManager
            # self.manager.get_screen('main').name = f"main_{group_name}" 

    # === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–º–µ–Ω ===
    def update_shifts(self, instance):
        global num_shifts
        try:
            new_num = int(self.shifts_entry.text)
            if 1 <= new_num <= 30:
                old_num = num_shifts
                num_shifts = new_num
                init_students()
                if new_num != old_num:
                    self.rebuild_ui()
            else:
                self.show_popup("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30")
        except ValueError:
            self.show_popup("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    # === –ü–µ—Ä–µ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã ===
    def rebuild_ui(self):
        self.main_table.clear_widgets()
        self.create_table_ui()
        self.update_status()

    # === –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ ===
    def change_single_name(self, index):
        def on_text_validate(text_input, popup):
            new_name = text_input.text.strip()
            if new_name:
                students[index]["name"] = new_name
                self.name_labels[index].text = new_name
            popup.dismiss()

        content = BoxLayout(orientation='vertical', spacing=dp(10), padding=dp(10))
        content.add_widget(Label(text=f"–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞ {index+1}:"))
        text_input = TextInput(text=students[index]["name"], multiline=False, font_size=sp(10))
        content.add_widget(text_input)
        
        btn_layout = BoxLayout(size_hint_y=None, height=dp(40), spacing=dp(10))
        cancel_btn = Button(text="–û—Ç–º–µ–Ω–∞")
        ok_btn = Button(text="OK", background_color=COLOR_SUCCESS)
        btn_layout.add_widget(cancel_btn)
        btn_layout.add_widget(ok_btn)
        content.add_widget(btn_layout)

        popup = Popup(title="–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞", content=content, size_hint=(0.8, 0.4))
        cancel_btn.bind(on_press=popup.dismiss)
        ok_btn.bind(on_press=lambda x: on_text_validate(text_input, popup))
        text_input.bind(on_text_validate=lambda x: on_text_validate(text_input, popup)) # Enter —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        popup.open()

    # === –í–≤–æ–¥ –§–ò–û ===
    def enter_names(self, instance):
        def create_name_input(i, scroll_layout):
            input_layout = BoxLayout(size_hint_y=None, height=dp(40), spacing=dp(5))
            input_layout.add_widget(Label(text=f"{i+1}:", size_hint_x=None, width=dp(30), halign='right', color=COLOR_DARK))
            ti = TextInput(text=students[i]["name"], multiline=False, font_size=sp(9))
            ti.student_index = i
            input_layout.add_widget(ti)
            scroll_layout.add_widget(input_layout)
            return ti

        def on_popup_dismiss(popup, text_inputs):
            for ti in text_inputs:
                if ti.text.strip():
                    students[ti.student_index]["name"] = ti.text.strip()
                    self.name_labels[ti.student_index].text = ti.text.strip()
            popup.dismiss()

        content = BoxLayout(orientation='vertical')
        scroll = ScrollView()
        scroll_layout = GridLayout(cols=1, spacing=dp(5), size_hint_y=None)
        scroll_layout.bind(minimum_height=scroll_layout.setter('height'))
        
        text_inputs = []
        for i in range(30):
            ti = create_name_input(i, scroll_layout)
            text_inputs.append(ti)
        
        scroll.add_widget(scroll_layout)
        content.add_widget(scroll)

        btn_layout = BoxLayout(size_hint_y=None, height=dp(50), spacing=dp(10))
        cancel_btn = Button(text="–û—Ç–º–µ–Ω–∞")
        ok_btn = Button(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", background_color=COLOR_SUCCESS)
        btn_layout.add_widget(cancel_btn)
        btn_layout.add_widget(ok_btn)
        content.add_widget(btn_layout)

        popup = Popup(title="–í–≤–æ–¥ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–æ–≤", content=content, size_hint=(0.9, 0.9))
        cancel_btn.bind(on_press=popup.dismiss)
        ok_btn.bind(on_press=lambda x: on_popup_dismiss(popup, text_inputs))
        popup.open()

    # === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ ===
    def update_status(self, *args):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å (–±–∞–ª–ª—ã, —Ü–≤–µ—Ç–∞) –≤ UI. –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è Clock.trigger."""
        total_scores = []
        shift_sums = [0] * num_shifts
        shift_counts = [0] * num_shifts
        
        for i in range(30):
            student = students[i]
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —è—á–µ–π–∫–∞—Ö —Å–º–µ–Ω
            for j in range(num_shifts):
                val = int(self.sliders[i][j].value)
                is_checked = self.checkboxes[i][j].active
                if is_checked:
                    if i < len(self.labels) and j < len(self.labels[i]):
                        if val >= 80:
                            self.labels[i][j].color = COLOR_SUCCESS
                        elif val >= 60:
                            self.labels[i][j].color = COLOR_WARNING
                        else:
                            self.labels[i][j].color = COLOR_DANGER
                else:
                    if i < len(self.labels) and j < len(self.labels[i]):
                        self.labels[i][j].color = COLOR_TEXT_DARK # –ß–µ—Ä–Ω—ã–π

            # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
            completed_values = [int(self.sliders[i][j].value) for j in range(num_shifts) if self.checkboxes[i][j].active]
            base_avg = sum(completed_values) / len(completed_values) if completed_values else 0
            final_score = base_avg
            if student["tb_pressed"]:
                final_score -= 20
            if student["work_pressed"]:
                final_score += 20
            final_score = max(0, min(100, final_score))
            student['total_score'] = final_score

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–ª–∞ –∏ –µ–≥–æ —Ü–≤–µ—Ç–∞
            if i < len(self.grade_labels):
                self.grade_labels[i].text = f"{final_score:.1f}"
                if final_score >= 80:
                    self.grade_labels[i].color = COLOR_SUCCESS
                elif final_score >= 60:
                    self.grade_labels[i].color = COLOR_WARNING
                elif final_score > 0:
                    self.grade_labels[i].color = COLOR_DANGER
                else:
                    self.grade_labels[i].color = COLOR_TEXT_DARK # –ß–µ—Ä–Ω—ã–π

            total_scores.append(final_score)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ –ø–æ –≥—Ä—É–ø–ø–µ
        avg_group = sum(total_scores) / len(total_scores) if total_scores else 0
        self.avg_label_global.text = f"{avg_group:.2f}"
        if avg_group >= 80:
            self.avg_label_global.color = COLOR_SUCCESS
        elif avg_group >= 60:
            self.avg_label_global.color = COLOR_WARNING
        elif avg_group > 0:
            self.avg_label_global.color = COLOR_ACCENT
        else:
            self.avg_label_global.color = COLOR_TEXT_DARK # –ß–µ—Ä–Ω—ã–π

    # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
    def save_current(self, instance):
        if group_name == "–ì—Ä—É–ø–ø–∞" and all(s["name"].startswith("–°—Ç—É–¥–µ–Ω—Ç") for s in students):
            self.show_popup("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –§–ò–û.")
            return
            
        filename = os.path.join(DATA_DIR, f"{group_name}.json")
        data = {
            "group_name": group_name,
            "num_shifts": num_shifts,
            "students": students,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        try:
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)
            self.show_popup("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–ì—Ä—É–ø–ø–∞ '{group_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", COLOR_SUCCESS)
        except Exception as e:
            self.show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}", COLOR_DANGER)

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø—ã ===
    def load_group(self, instance):
        try:
            files = [f for f in os.listdir(DATA_DIR) if f.endswith('.json')]
            if not files:
                self.show_popup("–ó–∞–≥—Ä—É–∑–∫–∞", "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
                return

            def on_file_selected(selected_filename, popup):
                popup.dismiss()
                if selected_filename:
                    filepath = os.path.join(DATA_DIR, f"{selected_filename}.json")
                    if os.path.exists(filepath):
                        try:
                            with open(filepath, "r", encoding="utf-8") as f:
                                data = json.load(f)
                            global group_name, num_shifts
                            group_name = data["group_name"]
                            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ num_shifts –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
                            loaded_num_shifts = data["num_shifts"]
                            num_shifts = max(1, min(30, loaded_num_shifts)) 
                            
                            global students
                            students = data["students"]
                            
                            self.group_entry.text = group_name
                            self.shifts_entry.text = str(num_shifts)
                            self.rebuild_ui()
                            self.show_popup("–ó–∞–≥—Ä—É–∑–∫–∞", f"–ì—Ä—É–ø–ø–∞ '{group_name}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞.", COLOR_SUCCESS)
                        except Exception as e:
                            self.show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {e}", COLOR_DANGER)
                    else:
                        self.show_popup("–û—à–∏–±–∫–∞", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", COLOR_DANGER)

            self._create_file_selection_popup("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", files, on_file_selected)

        except Exception as e:
            self.show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {e}", COLOR_DANGER)

    # === –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã ===
    def delete_group(self, instance):
        try:
            files = [f for f in os.listdir(DATA_DIR) if f.endswith('.json')]
            if not files:
                self.show_popup("–£–¥–∞–ª–µ–Ω–∏–µ", "–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø")
                return

            def confirm_delete(selected_filename, popup):
                popup.dismiss()
                def perform_delete(confirm_popup):
                    confirm_popup.dismiss()
                    filepath = os.path.join(DATA_DIR, f"{selected_filename}.json")
                    try:
                        os.remove(filepath)
                        self.show_popup("–£–¥–∞–ª–µ–Ω–∏–µ", f"–ì—Ä—É–ø–ø–∞ '{selected_filename}' —É–¥–∞–ª–µ–Ω–∞.", COLOR_SUCCESS)
                    except Exception as e:
                        self.show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {e}", COLOR_DANGER)

                confirm_content = BoxLayout(orientation='vertical', spacing=dp(10))
                confirm_content.add_widget(Label(text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É '{selected_filename}'?"))
                btn_layout = BoxLayout(size_hint_y=None, height=dp(40), spacing=dp(10))
                cancel_btn = Button(text="–û—Ç–º–µ–Ω–∞")
                delete_btn = Button(text="–£–¥–∞–ª–∏—Ç—å", background_color=COLOR_DANGER)
                btn_layout.add_widget(cancel_btn)
                btn_layout.add_widget(delete_btn)
                confirm_content.add_widget(btn_layout)

                confirm_popup = Popup(title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", content=confirm_content, size_hint=(0.6, 0.4))
                cancel_btn.bind(on_press=confirm_popup.dismiss)
                delete_btn.bind(on_press=lambda x: perform_delete(confirm_popup))
                confirm_popup.open()

            self._create_file_selection_popup("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", files, confirm_delete, btn_color=COLOR_ACCENT)

        except Exception as e:
            self.show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫: {e}", COLOR_DANGER)

    def _create_file_selection_popup(self, title, filenames, callback, btn_color=COLOR_SECONDARY):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ø–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞."""
        content = BoxLayout(orientation='vertical')
        scroll = ScrollView()
        files_layout = GridLayout(cols=1, spacing=dp(5), size_hint_y=None)
        files_layout.bind(minimum_height=files_layout.setter('height'))

        for filename in filenames:
            btn = Button(text=filename[:-5], size_hint_y=None, height=dp(40), background_color=btn_color)
            btn.file_name = filename[:-5]
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–±—Ä–∏—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ filename
            btn.bind(on_press=lambda x: callback(x.file_name, popup))
            files_layout.add_widget(btn)

        scroll.add_widget(files_layout)
        content.add_widget(scroll)

        close_btn = Button(text="–ó–∞–∫—Ä—ã—Ç—å", size_hint_y=None, height=dp(40))
        content.add_widget(close_btn)

        popup = Popup(title=title, content=content, size_hint=(0.8, 0.8))
        close_btn.bind(on_press=popup.dismiss)
        popup.open()

    # === –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV ===
    def export_to_csv(self, instance):
        if group_name == "–ì—Ä—É–ø–ø–∞" and all(s["name"].startswith("–°—Ç—É–¥–µ–Ω—Ç") for s in students):
            self.show_popup("–≠–∫—Å–ø–æ—Ä—Ç", "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –§–ò–û.")
            return
        # –í Kivy –Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É groups
        filename = os.path.join(DATA_DIR, f"{group_name}_export.csv")
        try:
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                headers = ["–§–ò–û", "–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª"]
                for j in range(num_shifts):
                    headers.append(f"–°–º–µ–Ω–∞ {j+1}")
                headers.extend(["–¢.–ë.", "–†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å"])
                writer.writerow(headers)
                for student in students:
                    row = [student["name"], f"{student['total_score']:.1f}"]
                    for j in range(num_shifts):
                        key = f"s{j+1}"
                        val = student.get(key, "")
                        row.append(val if val is not None else "")
                    row.append("–î–∞" if student["tb_pressed"] else "–ù–µ—Ç")
                    row.append("–î–∞" if student["work_pressed"] else "–ù–µ—Ç")
                    writer.writerow(row)
            self.show_popup("–≠–∫—Å–ø–æ—Ä—Ç", f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}", COLOR_SUCCESS)
        except Exception as e:
            self.show_popup("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {e}", COLOR_DANGER)

    # === –ü–µ—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã (–≤—ã–≤–æ–¥ –≤ Popup) ===
    def print_table(self, instance):
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è "–ø–µ—á–∞—Ç–∏"
        content_text = "–§–ò–û".ljust(20)
        for j in range(num_shifts):
            content_text += f"–°–º.{j+1}".ljust(8)
        content_text += "–¢.–ë.    –†–∞–±–æ—Ç–∞  –ò—Ç–æ–≥\n"
        content_text += "-" * len(content_text) + "\n"

        scores = [s['total_score'] for s in students]
        for i, student in enumerate(students):
            line = student["name"][:20].ljust(20)
            for j in range(num_shifts):
                key = f"s{j+1}"
                val = student.get(key, "")
                line += (str(val) if val is not None else "-").ljust(8)
            line += ("–î–∞" if student["tb_pressed"] else "–ù–µ—Ç").ljust(8)
            line += ("–î–∞" if student["work_pressed"] else "–ù–µ—Ç").ljust(8)
            line += f"{scores[i]:.1f}\n"
            content_text += line

        total_scores = [s for s in scores if s > 0]
        avg_group = sum(total_scores) / len(total_scores) if total_scores else 0
        content_text += f"\n–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≥—Ä—É–ø–ø–µ: {avg_group:.2f}\n"

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Popup
        content = BoxLayout(orientation='vertical')
        scroll = ScrollView()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω Label —Å –±–æ–ª—å—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö
        text_label = Label(
            text=content_text,
            # font_name='RobotoMono', # –£–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —à—Ä–∏—Ñ—Ç –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            halign='left',
            valign='top',
            text_size=(None, None), # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–Ω–æ—Å
            size_hint_y=None,
            font_size=sp(10) # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞,
            # color=COLOR_DARK # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        )
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É Label –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        # –≠—Ç–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        text_label.bind(texture_size=lambda instance, value: setattr(instance, 'size', value))
        
        scroll.add_widget(text_label)
        content.add_widget(scroll)

        close_btn = Button(text="–ó–∞–∫—Ä—ã—Ç—å", size_hint_y=None, height=dp(40))
        content.add_widget(close_btn)

        popup = Popup(title="–ü–µ—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã", content=content, size_hint=(0.9, 0.9))
        close_btn.bind(on_press=popup.dismiss)
        popup.open()


    # === –ì—Ä–∞—Ñ–∏–∫: —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞) ===
    def show_student_chart(self, instance):
        # –ó–∞–≥–ª—É—à–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        self.show_popup("–ì—Ä–∞—Ñ–∏–∫", "–ì—Ä–∞—Ñ–∏–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (kivy.garden.graph –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö). –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", COLOR_WARNING)

    # === –ì—Ä–∞—Ñ–∏–∫: —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ —Å–º–µ–Ω—É (–∑–∞–≥–ª—É—à–∫–∞) ===
    def show_shift_avg_chart(self, instance):
        # –ó–∞–≥–ª—É—à–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        self.show_popup("–ì—Ä–∞—Ñ–∏–∫", "–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–∏—Ö –±–∞–ª–ª–æ–≤ –ø–æ —Å–º–µ–Ω–∞–º. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (kivy.garden.graph –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö). –î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", COLOR_WARNING)

    # === –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ ===
    def show_popup(self, title, message, color=COLOR_SECONDARY):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ø–∞–ø —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        popup = Popup(
            title=title,
            content=Label(text=message, text_size=(dp(300), None)), #, color=COLOR_DARK), # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            size_hint=(0.8, 0.4),
            separator_color=color # kivy 2.0+
        )
        popup.open()

# === –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
class StudentProgressApp(App):
    def build(self):
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è desktop –≤–µ—Ä—Å–∏–∏
        # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ª—É—á—à–µ –≤–∏–¥–µ—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
        Window.size = (1400, 850)
        Window.minimum_width, Window.minimum_height = 1000, 700
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
        init_students()
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —ç–∫—Ä–∞–Ω–æ–≤
        sm = ScreenManager()
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        sm.add_widget(MainScreen(name='main'))
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –≤–∏–¥–∂–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        return sm

if __name__ == '__main__':
    StudentProgressApp().run()

